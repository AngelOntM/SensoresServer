"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Sensor_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Sensor"));
const mongoose = require('mongoose');
const { Schema } = mongoose;
mongoose.connect('mongodb://52.55.151.205:27017/proyecto');
const carros = new Schema({
    id: Number,
    pines: Array,
    clave: String,
    isActive: Boolean,
    seccion: Number,
    invernadero: Number,
    data: Array,
    created_at: Date,
    updated_at: Date,
    store: Boolean,
});
const carrito = mongoose.model('sensores', carros);
class CarritosController {
    async index({ response }) {
        const find = await carrito.find();
        console.log(find);
        return response.json({ find });
    }
    async show({ response, params }) {
        const find = await carrito.find({ 'id': params.id });
        return response.json({ find });
    }
    async store({ request, response }) {
        const validatedData = await Sensor_1.default.validar(request);
        var dato = await new carrito({
            id: 0,
            pines: validatedData.pines,
            clave: validatedData.clave,
            isActive: validatedData.isActive,
            seccion: validatedData.seccion,
            invernadero: validatedData.invernadero,
            data: [],
            created_at: Date.now(),
            updated_at: Date.now(),
            store: true,
        });
        await dato.save();
        return response.json({ dato });
    }
    async update({ response, request, params }) {
        const validatedData = await Sensor_1.default.validar(request);
        var dato = await new carrito({
            id: params.id,
            pines: validatedData.pines,
            clave: validatedData.clave,
            isActive: validatedData.isActive,
            seccion: validatedData.seccion,
            invernadero: validatedData.invernadero,
            data: [],
            updated_at: Date.now(),
            store: true,
        });
        const find = await carrito.findOne({ 'id': params.id });
        await find.update({ id: dato.id, pines: dato.pines, clave: dato.clave, isActive: dato.isActive, seccion: dato.seccion, invernadero: dato.invernadero, updated_at: dato.updated_at });
        await find.save();
        return response.json({ find });
    }
    async destroy({ response, params }) {
        const dato = await carrito.findOne({ 'id': params.id });
        await carrito.deleteOne({ 'id': params.id });
        await dato.delete();
        return response
            .status(200)
            .send({ message: 'Registro Eliminado' });
    }
    async storedata({ response, request, params }) {
        const validatedData = await Sensor_1.default.validar1(request);
        const find = await carrito.findOne({ 'id': params.id });
        const len = await carrito.findOne({ 'id': params.id }, { tam: { $size: '$data' }, '_id': false });
        console.log(len);
        await find.updateOne({ '$push': { data: { id: validatedData.id, fecha: validatedData.fecha, hora: validatedData.hora, valor: validatedData.valor, medida: validatedData.medida, nombre: validatedData.nombre, save: validatedData.save } } });
        await find.save();
        const find1 = await carrito.findOne({ 'id': params.id });
        return response.json({ find1 });
    }
}
exports.default = CarritosController;
//# sourceMappingURL=data:application/json;base64,