"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Users_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Users"));
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
class AuthController {
    async register({ request, response }) {
        const data = await request.validate({ schema: Users_1.default.validarEmpleado() });
        const user = await Users_1.default.create(data);
        return response.created(user);
    }
    async login({ request, response, auth }) {
        const password = await request.input('password');
        const email = await request.input('email');
        const user = await Users_1.default
            .query()
            .where('email', email)
            .firstOrFail();
        if (!(await Hash_1.default.verify(user.password, password))) {
            return response.badRequest('Invalid credentials');
        }
        else if (user.is_activated == true) {
            const token = await (await auth.use('api').generate(user, {
                expiresIn: '24hours'
            }));
            const data = {
                token: token,
                userLevel: user.rolid
            };
            return data;
        }
        else {
            return response
                .status(400)
                .send({ error: { message: 'User is not active' } });
        }
    }
    async logout({ auth, response }) {
        await auth.logout();
        return response.status(200);
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLG1GQUFtQztBQUNuQyxrRkFBd0M7QUFHeEMsTUFBcUIsY0FBYztJQUN4QixLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFFNUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLGVBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDdkUsTUFBTSxJQUFJLEdBQUcsTUFBTSxlQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3BDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBR00sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUF1QjtRQUMvRCxNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDaEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sZUFBSTthQUNsQixLQUFLLEVBQUU7YUFDUCxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUNyQixXQUFXLEVBQUUsQ0FBQTtRQUVsQixJQUFJLENBQUMsQ0FBQyxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFO1lBQy9DLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1NBQ3BEO2FBQU0sSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3RELFNBQVMsRUFBRSxTQUFTO2FBQ3ZCLENBQUMsQ0FBQyxDQUFBO1lBQ0gsTUFBTSxJQUFJLEdBQUc7Z0JBQ1QsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO2FBQ3hCLENBQUE7WUFDRCxPQUFPLElBQUksQ0FBQTtTQUNkO2FBQ0k7WUFDRCxPQUFPLFFBQVE7aUJBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWCxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDMUQ7SUFDTCxDQUFDO0lBR00sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQXVCO1FBQ3ZELE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ25CLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMvQixDQUFDO0NBQ0o7QUExQ0QsaUNBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXJzJ1xuaW1wb3J0IEhhc2ggZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IYXNoJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgYXN5bmMgcmVnaXN0ZXIoeyByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIC8vIHZhbGlkYXRlIGVtYWlsXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKHsgc2NoZW1hOiBVc2VyLnZhbGlkYXJFbXBsZWFkbygpIH0pXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZShkYXRhKVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuY3JlYXRlZCh1c2VyKVxuICAgIH1cblxuICAgIC8vICAgbG9naW4gZnVuY3Rpb25cbiAgICBwdWJsaWMgYXN5bmMgbG9naW4oeyByZXF1ZXN0LCByZXNwb25zZSwgYXV0aCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gYXdhaXQgcmVxdWVzdC5pbnB1dCgncGFzc3dvcmQnKVxuICAgICAgICBjb25zdCBlbWFpbCA9IGF3YWl0IHJlcXVlc3QuaW5wdXQoJ2VtYWlsJylcblxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlclxuICAgICAgICAgICAgLnF1ZXJ5KClcbiAgICAgICAgICAgIC53aGVyZSgnZW1haWwnLCBlbWFpbClcbiAgICAgICAgICAgIC5maXJzdE9yRmFpbCgpXG5cbiAgICAgICAgaWYgKCEoYXdhaXQgSGFzaC52ZXJpZnkodXNlci5wYXNzd29yZCwgcGFzc3dvcmQpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoJ0ludmFsaWQgY3JlZGVudGlhbHMnKVxuICAgICAgICB9IGVsc2UgaWYgKHVzZXIuaXNfYWN0aXZhdGVkID09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgKGF3YWl0IGF1dGgudXNlKCdhcGknKS5nZW5lcmF0ZSh1c2VyLCB7XG4gICAgICAgICAgICAgICAgZXhwaXJlc0luOiAnMjRob3VycydcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgICAgICAgICAgdXNlckxldmVsOiB1c2VyLnJvbGlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgLnN0YXR1cyg0MDApXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlcnJvcjogeyBtZXNzYWdlOiAnVXNlciBpcyBub3QgYWN0aXZlJyB9IH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAgIGxvZ291dCBmdW5jdGlvblxuICAgIHB1YmxpYyBhc3luYyBsb2dvdXQoeyBhdXRoLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGF3YWl0IGF1dGgubG9nb3V0KClcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDApXG4gICAgfVxufVxuIl19