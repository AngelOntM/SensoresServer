"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Users_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Users"));
class UsersController {
    async index({ auth, response }) {
        if (auth.user?.rolid == 1) {
            const users = await Users_1.default.ver();
            return response.json({ users });
        }
        else {
            return response
                .status(400)
                .send({ error: { message: 'User has no permissions' } });
        }
    }
    async store({ auth, request, response }) {
        if (auth.user?.rolid == 1) {
            const validatedData = await request.validate({ schema: Users_1.default.validarAdmin() });
            const users = await Users_1.default.crear(validatedData);
            return response.json({ users });
        }
        else {
            return response
                .status(400)
                .send({ error: { message: 'User has no permissions' } });
        }
    }
    async show({ auth, response, params }) {
        const user = await Users_1.default.verUno(auth.user?.rolid, auth.user?.id, params.id);
        if (user != null) {
            return user;
        }
        else {
            return response
                .status(400)
                .send({ error: { message: 'User has no permissions' } });
        }
    }
    async update({ auth, request, response, params }) {
        try {
            const users = await Users_1.default.findByOrFail('id', params.id);
            const validado = await Users_1.default.validar(auth.user?.rolid, request);
            users.merge(validado);
            await users.save();
            Users_1.default.desactivar(users);
            return response.json({ users });
        }
        catch (e) {
            return response
                .status(400)
                .send({ error: { message: 'Something is wrong' } });
        }
    }
    async destroy({ auth, response, params }) {
        if (auth.user?.rolid == 1) {
            const users = await Users_1.default.findByOrFail('id', params.id);
            await users.delete();
            return response.json({ users });
        }
        else {
            return response
                .status(400)
                .send({ error: { message: 'User has no permissions' } });
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsbUZBQW1DO0FBR25DLE1BQXFCLGVBQWU7SUFDekIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQXVCO1FBQ3RELElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLE1BQU0sZUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQy9CLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7U0FDbEM7YUFBTTtZQUNILE9BQU8sUUFBUTtpQkFDVixNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxFQUFFLENBQUMsQ0FBQTtTQUMvRDtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQy9ELElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sYUFBYSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQzdFLE1BQU0sS0FBSyxHQUFHLE1BQU0sZUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ25DO2FBQ0k7WUFDRCxPQUFPLFFBQVE7aUJBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWCxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDL0Q7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUF1QjtRQUM3RCxNQUFNLElBQUksR0FBRyxNQUFNLGVBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzFFLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7YUFBTTtZQUNILE9BQU8sUUFBUTtpQkFDVixNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxFQUFFLENBQUMsQ0FBQTtTQUMvRDtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUF1QjtRQUN4RSxJQUFJO1lBQ0EsTUFBTSxLQUFLLEdBQUcsTUFBTSxlQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDdEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxlQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBQzlELEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDckIsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDbEIsZUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUN0QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1NBQ2xDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLFFBQVE7aUJBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWCxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDMUQ7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUF1QjtRQUNoRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtZQUN2QixNQUFNLEtBQUssR0FBRyxNQUFNLGVBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUN0RCxNQUFNLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUNwQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1NBQ2xDO2FBQU07WUFDSCxPQUFPLFFBQVE7aUJBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWCxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDL0Q7SUFDTCxDQUFDO0NBQ0o7QUE5REQsa0NBOERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXJzJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJzQ29udHJvbGxlciB7XG4gICAgcHVibGljIGFzeW5jIGluZGV4KHsgYXV0aCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBpZiAoYXV0aC51c2VyPy5yb2xpZCA9PSAxKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VycyA9IGF3YWl0IFVzZXIudmVyKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbih7IHVzZXJzIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAuc3RhdHVzKDQwMClcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVycm9yOiB7IG1lc3NhZ2U6ICdVc2VyIGhhcyBubyBwZXJtaXNzaW9ucycgfSB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0b3JlKHsgYXV0aCwgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBpZiAoYXV0aC51c2VyPy5yb2xpZCA9PSAxKSB7XG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZSh7IHNjaGVtYTogVXNlci52YWxpZGFyQWRtaW4oKSB9KVxuICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhd2FpdCBVc2VyLmNyZWFyKHZhbGlkYXRlZERhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oeyB1c2VycyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICAgICAgICAgIC5zdGF0dXMoNDAwKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZXJyb3I6IHsgbWVzc2FnZTogJ1VzZXIgaGFzIG5vIHBlcm1pc3Npb25zJyB9IH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2hvdyh7IGF1dGgsIHJlc3BvbnNlLCBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci52ZXJVbm8oYXV0aC51c2VyPy5yb2xpZCwgYXV0aC51c2VyPy5pZCwgcGFyYW1zLmlkKVxuICAgICAgICBpZiAodXNlciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgLnN0YXR1cyg0MDApXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlcnJvcjogeyBtZXNzYWdlOiAnVXNlciBoYXMgbm8gcGVybWlzc2lvbnMnIH0gfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGUoeyBhdXRoLCByZXF1ZXN0LCByZXNwb25zZSwgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgVXNlci5maW5kQnlPckZhaWwoJ2lkJywgcGFyYW1zLmlkKVxuICAgICAgICAgICAgY29uc3QgdmFsaWRhZG8gPSBhd2FpdCBVc2VyLnZhbGlkYXIoYXV0aC51c2VyPy5yb2xpZCwgcmVxdWVzdClcbiAgICAgICAgICAgIHVzZXJzLm1lcmdlKHZhbGlkYWRvKVxuICAgICAgICAgICAgYXdhaXQgdXNlcnMuc2F2ZSgpXG4gICAgICAgICAgICBVc2VyLmRlc2FjdGl2YXIodXNlcnMpXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbih7IHVzZXJzIH0pXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICAgICAgICAgIC5zdGF0dXMoNDAwKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZXJyb3I6IHsgbWVzc2FnZTogJ1NvbWV0aGluZyBpcyB3cm9uZycgfSB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRlc3Ryb3koeyBhdXRoLCByZXNwb25zZSwgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgaWYgKGF1dGgudXNlcj8ucm9saWQgPT0gMSkge1xuICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhd2FpdCBVc2VyLmZpbmRCeU9yRmFpbCgnaWQnLCBwYXJhbXMuaWQpXG4gICAgICAgICAgICBhd2FpdCB1c2Vycy5kZWxldGUoKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oeyB1c2VycyB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgLnN0YXR1cyg0MDApXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlcnJvcjogeyBtZXNzYWdlOiAnVXNlciBoYXMgbm8gcGVybWlzc2lvbnMnIH0gfSlcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==