"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const luxon_1 = require("luxon");
const Orm_1 = global[Symbol.for('ioc.use')]("Adonis/Lucid/Orm");
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class Sensor extends Orm_1.BaseModel {
    static ver() {
        return this.query();
    }
    static verUno(id) {
        return this.findByOrFail('sensorid', id);
    }
    static crear(data) {
        return this.create(data);
    }
    static schemasen() {
        const postSchema = Validator_1.schema.create({
            sensor: Validator_1.schema.string(),
            clave: Validator_1.schema.string(),
        });
        return postSchema;
    }
    static schema() {
        const postSchema = Validator_1.schema.create({
            pines: Validator_1.schema.array().members(Validator_1.schema.number()),
            clave: Validator_1.schema.string(),
            isActive: Validator_1.schema.boolean(),
            seccion: Validator_1.schema.number(),
            invernadero: Validator_1.schema.number()
        });
        return postSchema;
    }
    static validar(data) {
        return data.validate({ schema: this.schema() });
    }
    static validarsen(data) {
        return data.validate({ schema: this.schema() });
    }
    static schema1() {
        const postSchema = Validator_1.schema.create({
            id: Validator_1.schema.number(),
            fecha: Validator_1.schema.string(),
            hora: Validator_1.schema.string(),
            valor: Validator_1.schema.number(),
            medida: Validator_1.schema.string(),
            nombre: Validator_1.schema.string()
        });
        return postSchema;
    }
    static validar1(data) {
        return data.validate({ schema: this.schema1() });
    }
    static eliminar(dato) {
        return dato.delete();
    }
    static modificar(data, registro) {
        return registro.merge(data).save();
    }
}
__decorate([
    (0, Orm_1.column)({ isPrimary: true }),
    __metadata("design:type", Number)
], Sensor.prototype, "sensorid", void 0);
__decorate([
    (0, Orm_1.column)(),
    __metadata("design:type", String)
], Sensor.prototype, "sensor", void 0);
__decorate([
    (0, Orm_1.column)(),
    __metadata("design:type", String)
], Sensor.prototype, "clave", void 0);
__decorate([
    Orm_1.column.dateTime({ autoCreate: true }),
    __metadata("design:type", typeof (_a = typeof luxon_1.DateTime !== "undefined" && luxon_1.DateTime) === "function" ? _a : Object)
], Sensor.prototype, "createdAt", void 0);
__decorate([
    Orm_1.column.dateTime({ autoCreate: true, autoUpdate: true }),
    __metadata("design:type", typeof (_b = typeof luxon_1.DateTime !== "undefined" && luxon_1.DateTime) === "function" ? _b : Object)
], Sensor.prototype, "updatedAt", void 0);
exports.default = Sensor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2Vuc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGlDQUFnQztBQUNoQyxnRUFBeUQ7QUFDekQsMkVBQW1EO0FBRW5ELE1BQXFCLE1BQU8sU0FBUSxlQUFTO0lBZ0JwQyxNQUFNLENBQUMsR0FBRztRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxQixDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVM7UUFDckIsTUFBTSxVQUFVLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sRUFBRTtTQUN2QixDQUFDLENBQUE7UUFDRixPQUFPLFVBQVUsQ0FBQTtJQUNuQixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU07UUFDbEIsTUFBTSxVQUFVLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsS0FBSyxFQUFFLGtCQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLGtCQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDOUMsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3RCLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE9BQU8sRUFBRTtZQUMxQixPQUFPLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7WUFDeEIsV0FBVyxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1NBQzdCLENBQUMsQ0FBQTtRQUNGLE9BQU8sVUFBVSxDQUFBO0lBQ25CLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUk7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDakQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSTtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU87UUFDbkIsTUFBTSxVQUFVLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsRUFBRSxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ25CLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7WUFDckIsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3RCLE1BQU0sRUFBRSxrQkFBTSxDQUFDLE1BQU0sRUFBRTtZQUN2QixNQUFNLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7U0FDeEIsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxVQUFVLENBQUE7SUFDbkIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSTtRQUN6QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNsRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3RCLENBQUM7SUFFTSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRO1FBQ3BDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNwQyxDQUFDO0NBRUY7QUE3RUM7SUFEQyxJQUFBLFlBQU0sRUFBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQzs7d0NBQ0w7QUFHdkI7SUFEQyxJQUFBLFlBQU0sR0FBRTs7c0NBQ1k7QUFHckI7SUFEQyxJQUFBLFlBQU0sR0FBRTs7cUNBQ1c7QUFHcEI7SUFEQyxZQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO2tEQUNwQixnQkFBUSxvQkFBUixnQkFBUTt5Q0FBQTtBQUcxQjtJQURDLFlBQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztrREFDdEMsZ0JBQVEsb0JBQVIsZ0JBQVE7eUNBQUE7QUFkNUIseUJBK0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbidcbmltcG9ydCB7IEJhc2VNb2RlbCwgY29sdW1uIH0gZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvT3JtJ1xuaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbnNvciBleHRlbmRzIEJhc2VNb2RlbCB7XG4gIEBjb2x1bW4oeyBpc1ByaW1hcnk6IHRydWUgfSlcbiAgcHVibGljIHNlbnNvcmlkOiBudW1iZXJcblxuICBAY29sdW1uKClcbiAgcHVibGljIHNlbnNvcjogc3RyaW5nXG5cbiAgQGNvbHVtbigpXG4gIHB1YmxpYyBjbGF2ZTogc3RyaW5nXG5cbiAgQGNvbHVtbi5kYXRlVGltZSh7IGF1dG9DcmVhdGU6IHRydWUgfSlcbiAgcHVibGljIGNyZWF0ZWRBdDogRGF0ZVRpbWVcblxuICBAY29sdW1uLmRhdGVUaW1lKHsgYXV0b0NyZWF0ZTogdHJ1ZSwgYXV0b1VwZGF0ZTogdHJ1ZSB9KVxuICBwdWJsaWMgdXBkYXRlZEF0OiBEYXRlVGltZVxuXG4gIHB1YmxpYyBzdGF0aWMgdmVyKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5KClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdmVyVW5vKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZEJ5T3JGYWlsKCdzZW5zb3JpZCcsIGlkKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjcmVhcihkYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKGRhdGEpXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNjaGVtYXNlbigpIHtcbiAgICBjb25zdCBwb3N0U2NoZW1hID0gc2NoZW1hLmNyZWF0ZSh7XG4gICAgICBzZW5zb3I6IHNjaGVtYS5zdHJpbmcoKSxcbiAgICAgIGNsYXZlOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgfSlcbiAgICByZXR1cm4gcG9zdFNjaGVtYVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzY2hlbWEoKSB7XG4gICAgY29uc3QgcG9zdFNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgcGluZXM6IHNjaGVtYS5hcnJheSgpLm1lbWJlcnMoc2NoZW1hLm51bWJlcigpKSxcbiAgICAgIGNsYXZlOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgICBpc0FjdGl2ZTogc2NoZW1hLmJvb2xlYW4oKSxcbiAgICAgIHNlY2Npb246IHNjaGVtYS5udW1iZXIoKSxcbiAgICAgIGludmVybmFkZXJvOiBzY2hlbWEubnVtYmVyKClcbiAgICB9KVxuICAgIHJldHVybiBwb3N0U2NoZW1hXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHZhbGlkYXIoZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnZhbGlkYXRlKHsgc2NoZW1hOiB0aGlzLnNjaGVtYSgpIH0pXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHZhbGlkYXJzZW4oZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnZhbGlkYXRlKHsgc2NoZW1hOiB0aGlzLnNjaGVtYSgpIH0pXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNjaGVtYTEoKSB7XG4gICAgY29uc3QgcG9zdFNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgaWQ6IHNjaGVtYS5udW1iZXIoKSxcbiAgICAgIGZlY2hhOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgICBob3JhOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgICB2YWxvcjogc2NoZW1hLm51bWJlcigpLFxuICAgICAgbWVkaWRhOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgICBub21icmU6IHNjaGVtYS5zdHJpbmcoKVxuICAgIH0pXG4gICAgcmV0dXJuIHBvc3RTY2hlbWFcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdmFsaWRhcjEoZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnZhbGlkYXRlKHsgc2NoZW1hOiB0aGlzLnNjaGVtYTEoKSB9KVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBlbGltaW5hcihkYXRvKSB7XG4gICAgcmV0dXJuIGRhdG8uZGVsZXRlKClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbW9kaWZpY2FyKGRhdGEsIHJlZ2lzdHJvKSB7XG4gICAgcmV0dXJuIHJlZ2lzdHJvLm1lcmdlKGRhdGEpLnNhdmUoKVxuICB9XG5cbn1cblxuIl19