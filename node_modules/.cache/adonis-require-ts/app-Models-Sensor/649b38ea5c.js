"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const luxon_1 = require("luxon");
const Orm_1 = global[Symbol.for('ioc.use')]("Adonis/Lucid/Orm");
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class Sensor extends Orm_1.BaseModel {
    static ver() {
        return this.query();
    }
    static verUno(id) {
        return this.findByOrFail('sensorid', id);
    }
    static crear(data) {
        return this.create(data);
    }
    static schemasen() {
        const postSchema = Validator_1.schema.create({
            sensor: Validator_1.schema.string(),
            clave: Validator_1.schema.string(),
        });
        return postSchema;
    }
    static schema() {
        const postSchema = Validator_1.schema.create({
            pines: Validator_1.schema.array().members(Validator_1.schema.number()),
            clave: Validator_1.schema.string(),
            isActive: Validator_1.schema.boolean(),
            seccion: Validator_1.schema.number(),
            invernadero: Validator_1.schema.number()
        });
        return postSchema;
    }
    static validar(data) {
        return data.validate({ schema: this.schema() });
    }
    static validarsen(data) {
        return data.validate({ schema: this.schema() });
    }
    static schema1() {
        const postSchema = Validator_1.schema.create({
            id: Validator_1.schema.number(),
            fecha: Validator_1.schema.string(),
            hora: Validator_1.schema.string(),
            valor: Validator_1.schema.number(),
            medida: Validator_1.schema.string(),
            nombre: Validator_1.schema.string(),
            save: Validator_1.schema.boolean()
        });
        return postSchema;
    }
    static validar1(data) {
        return data.validate({ schema: this.schema1() });
    }
    static eliminar(dato) {
        return dato.delete();
    }
    static modificar(data, registro) {
        return registro.merge(data).save();
    }
}
__decorate([
    (0, Orm_1.column)({ isPrimary: true }),
    __metadata("design:type", Number)
], Sensor.prototype, "sensorid", void 0);
__decorate([
    (0, Orm_1.column)(),
    __metadata("design:type", String)
], Sensor.prototype, "sensor", void 0);
__decorate([
    (0, Orm_1.column)(),
    __metadata("design:type", String)
], Sensor.prototype, "clave", void 0);
__decorate([
    Orm_1.column.dateTime({ autoCreate: true }),
    __metadata("design:type", typeof (_a = typeof luxon_1.DateTime !== "undefined" && luxon_1.DateTime) === "function" ? _a : Object)
], Sensor.prototype, "createdAt", void 0);
__decorate([
    Orm_1.column.dateTime({ autoCreate: true, autoUpdate: true }),
    __metadata("design:type", typeof (_b = typeof luxon_1.DateTime !== "undefined" && luxon_1.DateTime) === "function" ? _b : Object)
], Sensor.prototype, "updatedAt", void 0);
exports.default = Sensor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2Vuc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGlDQUFnQztBQUNoQyxnRUFBeUQ7QUFDekQsMkVBQW1EO0FBRW5ELE1BQXFCLE1BQU8sU0FBUSxlQUFTO0lBZ0JwQyxNQUFNLENBQUMsR0FBRztRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxQixDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVM7UUFDckIsTUFBTSxVQUFVLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sRUFBRTtTQUN2QixDQUFDLENBQUE7UUFDRixPQUFPLFVBQVUsQ0FBQTtJQUNuQixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU07UUFDbEIsTUFBTSxVQUFVLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsS0FBSyxFQUFFLGtCQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLGtCQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDOUMsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3RCLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE9BQU8sRUFBRTtZQUMxQixPQUFPLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7WUFDeEIsV0FBVyxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1NBQzdCLENBQUMsQ0FBQTtRQUNGLE9BQU8sVUFBVSxDQUFBO0lBQ25CLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUk7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDakQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSTtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU87UUFDbkIsTUFBTSxVQUFVLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsRUFBRSxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ25CLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7WUFDckIsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3RCLE1BQU0sRUFBRSxrQkFBTSxDQUFDLE1BQU0sRUFBRTtZQUN2QixNQUFNLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7WUFDdkIsSUFBSSxFQUFFLGtCQUFNLENBQUMsT0FBTyxFQUFFO1NBQ3ZCLENBQUMsQ0FBQTtRQUNGLE9BQU8sVUFBVSxDQUFBO0lBQ25CLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUk7UUFDekIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDbEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSTtRQUN6QixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUN0QixDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtRQUNwQyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDcEMsQ0FBQztDQUVGO0FBOUVDO0lBREMsSUFBQSxZQUFNLEVBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7O3dDQUNMO0FBR3ZCO0lBREMsSUFBQSxZQUFNLEdBQUU7O3NDQUNZO0FBR3JCO0lBREMsSUFBQSxZQUFNLEdBQUU7O3FDQUNXO0FBR3BCO0lBREMsWUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztrREFDcEIsZ0JBQVEsb0JBQVIsZ0JBQVE7eUNBQUE7QUFHMUI7SUFEQyxZQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7a0RBQ3RDLGdCQUFRLG9CQUFSLGdCQUFRO3lDQUFBO0FBZDVCLHlCQWdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nXG5pbXBvcnQgeyBCYXNlTW9kZWwsIGNvbHVtbiB9IGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL09ybSdcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvVmFsaWRhdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5zb3IgZXh0ZW5kcyBCYXNlTW9kZWwge1xuICBAY29sdW1uKHsgaXNQcmltYXJ5OiB0cnVlIH0pXG4gIHB1YmxpYyBzZW5zb3JpZDogbnVtYmVyXG5cbiAgQGNvbHVtbigpXG4gIHB1YmxpYyBzZW5zb3I6IHN0cmluZ1xuXG4gIEBjb2x1bW4oKVxuICBwdWJsaWMgY2xhdmU6IHN0cmluZ1xuXG4gIEBjb2x1bW4uZGF0ZVRpbWUoeyBhdXRvQ3JlYXRlOiB0cnVlIH0pXG4gIHB1YmxpYyBjcmVhdGVkQXQ6IERhdGVUaW1lXG5cbiAgQGNvbHVtbi5kYXRlVGltZSh7IGF1dG9DcmVhdGU6IHRydWUsIGF1dG9VcGRhdGU6IHRydWUgfSlcbiAgcHVibGljIHVwZGF0ZWRBdDogRGF0ZVRpbWVcblxuICBwdWJsaWMgc3RhdGljIHZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeSgpXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHZlclVubyhpZCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRCeU9yRmFpbCgnc2Vuc29yaWQnLCBpZClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXIoZGF0YSkge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZShkYXRhKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzY2hlbWFzZW4oKSB7XG4gICAgY29uc3QgcG9zdFNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgc2Vuc29yOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgICBjbGF2ZTogc2NoZW1hLnN0cmluZygpLFxuICAgIH0pXG4gICAgcmV0dXJuIHBvc3RTY2hlbWFcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2NoZW1hKCkge1xuICAgIGNvbnN0IHBvc3RTY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcbiAgICAgIHBpbmVzOiBzY2hlbWEuYXJyYXkoKS5tZW1iZXJzKHNjaGVtYS5udW1iZXIoKSksXG4gICAgICBjbGF2ZTogc2NoZW1hLnN0cmluZygpLFxuICAgICAgaXNBY3RpdmU6IHNjaGVtYS5ib29sZWFuKCksXG4gICAgICBzZWNjaW9uOiBzY2hlbWEubnVtYmVyKCksXG4gICAgICBpbnZlcm5hZGVybzogc2NoZW1hLm51bWJlcigpXG4gICAgfSlcbiAgICByZXR1cm4gcG9zdFNjaGVtYVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyB2YWxpZGFyKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS52YWxpZGF0ZSh7IHNjaGVtYTogdGhpcy5zY2hlbWEoKSB9KVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyB2YWxpZGFyc2VuKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS52YWxpZGF0ZSh7IHNjaGVtYTogdGhpcy5zY2hlbWEoKSB9KVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzY2hlbWExKCkge1xuICAgIGNvbnN0IHBvc3RTY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcbiAgICAgIGlkOiBzY2hlbWEubnVtYmVyKCksXG4gICAgICBmZWNoYTogc2NoZW1hLnN0cmluZygpLFxuICAgICAgaG9yYTogc2NoZW1hLnN0cmluZygpLFxuICAgICAgdmFsb3I6IHNjaGVtYS5udW1iZXIoKSxcbiAgICAgIG1lZGlkYTogc2NoZW1hLnN0cmluZygpLFxuICAgICAgbm9tYnJlOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgICBzYXZlOiBzY2hlbWEuYm9vbGVhbigpXG4gICAgfSlcbiAgICByZXR1cm4gcG9zdFNjaGVtYVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyB2YWxpZGFyMShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEudmFsaWRhdGUoeyBzY2hlbWE6IHRoaXMuc2NoZW1hMSgpIH0pXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGVsaW1pbmFyKGRhdG8pIHtcbiAgICByZXR1cm4gZGF0by5kZWxldGUoKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBtb2RpZmljYXIoZGF0YSwgcmVnaXN0cm8pIHtcbiAgICByZXR1cm4gcmVnaXN0cm8ubWVyZ2UoZGF0YSkuc2F2ZSgpXG4gIH1cblxufVxuXG4iXX0=